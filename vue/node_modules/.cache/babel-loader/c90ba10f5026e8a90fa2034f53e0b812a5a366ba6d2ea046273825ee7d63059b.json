{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, createElementVNode as _createElementVNode, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"input-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Блок чата \"), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"chat-container\", {\n      'moved': $setup.messageSent\n    }])\n  }, [_createCommentVNode(\" Ответ на вопрос \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.chatHistory, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.text,\n      class: _normalizeClass([\"message\", {\n        'user-message': message.isUser\n      }])\n    }, _toDisplayString(message.text), 3 /* TEXT, CLASS */);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Поле ввода текста \"), _withDirectives(_createElementVNode(\"textarea\", {\n    class: \"question-input\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.question = $event),\n    placeholder: \"Введите ваш вопрос здесь\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $setup.askQuestion && $setup.askQuestion(...args), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $setup.question]]), _createCommentVNode(\" Кнопка отправки \"), _createElementVNode(\"button\", {\n    class: \"send-button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.askQuestion && $setup.askQuestion(...args))\n  }, \"&\")]), _createCommentVNode(\" Индикатор загрузки \"), $setup.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"Загрузка...\")) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createCommentVNode","_createElementVNode","_normalizeClass","$setup","messageSent","_createElementBlock","_Fragment","_renderList","chatHistory","message","key","text","isUser","_hoisted_1","question","$event","placeholder","onKeyup","_cache","_withKeys","args","askQuestion","onClick","loading","_hoisted_2"],"sources":["/home/doduohor/vue/src/App.vue"],"sourcesContent":["<template>\n    <!-- Блок чата -->\n    <div class=\"chat-container\" :class=\"{ 'moved': messageSent }\">\n        <!-- Ответ на вопрос -->\n        <div v-for=\"message in chatHistory\" :key=\"message.text\" class=\"message\" :class=\"{ 'user-message': message.isUser }\">\n            {{ message.text }}\n        </div>\n        <div class=\"input-container\">\n            <!-- Поле ввода текста -->\n            <textarea class=\"question-input\" v-model=\"question\" placeholder=\"Введите ваш вопрос здесь\"\n                @keyup.enter=\"askQuestion\"></textarea>\n            <!-- Кнопка отправки -->\n            <button class=\"send-button\" @click=\"askQuestion\">&</button>\n        </div>\n        <!-- Индикатор загрузки -->\n        <div v-if=\"loading\" class=\"loading\">Загрузка...</div>\n    </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n    setup() {\n        const question = ref(''); // Поле ввода текста\n        const response = ref(null); // Ответ на вопрос\n        const loading = ref(false); // Индикатор загрузки\n        const messageSent = ref(false); // Флаг для перемещения элементов\n        const chatHistory = ref([]); // Массив для хранения истории сообщений\n\n        const askQuestion = async () => {\n            if (question.value.trim() === '') return; // Предотвращение отправки пустых сообщений\n            loading.value = true;\n            messageSent.value = true; // Устанавливаем флаг после отправки сообщения\n            // Здесь должен быть код для отправки запроса к API\n            // Для примера, просто имитируем получение ответа\n            setTimeout(() => {\n                response.value = question.value; // Удаление \"Ответ: \" для простоты\n                loading.value = false;\n                chatHistory.value.push({ text: question.value, isUser: true }); // Добавить сообщение пользователя\n                chatHistory.value.push({ text: response.value, isUser: false }); // Добавить ответ\n                question.value = ''; // Очистить поле ввода после отправки\n            }, 2000);\n        };\n\n        return { question, response, askQuestion, loading, messageSent, chatHistory };\n    }\n};\n</script>\n\n<style>\nbody {\n    background-color: #121212;\n    /* Темный фон для всей страницы */\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\n/* Стили для блока чата */\n.chat-container {\n    position: absolute;\n    top: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 600px;\n    padding: 20px;\n    background-color: #1e1e1e;\n    border-radius: 10px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);\n    color: #ffffff;\n    transition: all 0.5s ease;\n}\n\n.chat-container.moved {\n    top: auto;\n    bottom: 20px;\n    /* Перемещение в нижнюю часть страницы */\n    transform: translateX(-50%);\n}\n\n/* Стили для сообщений */\n.message {\n    margin-top: 10px;\n    padding: 10px;\n    border-radius: 6px;\n    max-width: 80%;\n    word-wrap: break-word;\n}\n\n.user-message {\n    background-color: #4caf50;\n    color: white;\n}\n\n/* Стили для поля ввода текста */\n.input-container {\n    display: flex;\n    align-items: stretch;\n    margin-bottom: 15px;\n}\n\n.question-input {\n    flex-grow: 1;\n    padding: 12px;\n    background-color: #2a2a2a;\n    border: 1px solid #333333;\n    border-radius: 6px 0 0 6px;\n    color: #ffffff;\n    resize: none;\n}\n\n/* Стили для кнопки отправки */\n.send-button {\n    padding: 0 15px;\n    background-color: #4caf50;\n    color: white;\n    border: none;\n    border-radius: 0 6px 6px 0;\n    cursor: pointer;\n    transition: background-color 0.3s, transform 0.2s;\n}\n\n.send-button:hover {\n    background-color: #43a047;\n    transform: scale(1.05);\n}\n\n/* Стили для индикатора загрузки */\n.loading {\n    text-align: center;\n    color: #4caf50;\n    margin-top: 10px;\n}\n\n/* Стили для ответа на вопрос */\n.response {\n    margin-top: 20px;\n    padding: 15px;\n    border-radius: 6px;\n    color: #ffffff;\n}\n</style>\n"],"mappings":";;EAOaA,KAAK,EAAC;AAAiB;;;EAQRA,KAAK,EAAC;;;6DAd9BC,mBAAA,eAAkB,EAClBC,mBAAA,CAcM;IAdDF,KAAK,EAAAG,eAAA,EAAC,gBAAgB;MAAA,SAAoBC,MAAA,CAAAC;IAAW;MACtDJ,mBAAA,qBAAwB,G,kBACxBK,mBAAA,CAEMC,SAAA,QAAAC,WAAA,CAFiBJ,MAAA,CAAAK,WAAW,EAAtBC,OAAO;yBAAnBJ,mBAAA,CAEM;MAF+BK,GAAG,EAAED,OAAO,CAACE,IAAI;MAAEZ,KAAK,EAAAG,eAAA,EAAC,SAAS;QAAA,gBAA2BO,OAAO,CAACG;MAAM;wBACzGH,OAAO,CAACE,IAAI;kCAEnBV,mBAAA,CAMM,OANNY,UAMM,GALFb,mBAAA,uBAA0B,E,gBAC1BC,mBAAA,CAC0C;IADhCF,KAAK,EAAC,gBAAgB;+DAAUI,MAAA,CAAAW,QAAQ,GAAAC,MAAA;IAAEC,WAAW,EAAC,0BAA0B;IACrFC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,SAAA,KAAAC,IAAA,KAAQjB,MAAA,CAAAkB,WAAA,IAAAlB,MAAA,CAAAkB,WAAA,IAAAD,IAAA,CAAW;iEADajB,MAAA,CAAAW,QAAQ,E,GAElDd,mBAAA,qBAAwB,EACxBC,mBAAA,CAA2D;IAAnDF,KAAK,EAAC,aAAa;IAAEuB,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEjB,MAAA,CAAAkB,WAAA,IAAAlB,MAAA,CAAAkB,WAAA,IAAAD,IAAA,CAAW;KAAE,GAAC,E,GAEtDpB,mBAAA,wBAA2B,EAChBG,MAAA,CAAAoB,OAAO,I,cAAlBlB,mBAAA,CAAqD,OAArDmB,UAAqD,EAAjB,aAAW,K"},"metadata":{},"sourceType":"module","externalDependencies":[]}