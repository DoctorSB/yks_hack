{"ast":null,"code":"import { ref } from 'vue';\nexport default {\n  setup() {\n    const question = ref(''); // Поле ввода текста\n    const response = ref(null); // Ответ на вопрос\n    const loading = ref(false); // Индикатор загрузки\n    const messageSent = ref(false); // Флаг для перемещения элементов\n\n    const askQuestion = async () => {\n      if (question.value.trim() === '') return; // Предотвращение отправки пустых сообщений\n      loading.value = true;\n      messageSent.value = true; // Устанавливаем флаг после отправки сообщения\n      // Здесь должен быть код для отправки запроса к API\n      // Для примера, просто имитируем получение ответа\n      setTimeout(() => {\n        response.value = question.value; // Удаление \"Ответ: \" для простоты\n        loading.value = false;\n      }, 2000);\n    };\n    return {\n      question,\n      response,\n      askQuestion,\n      loading,\n      messageSent\n    };\n  }\n};","map":{"version":3,"names":["ref","setup","question","response","loading","messageSent","askQuestion","value","trim","setTimeout"],"sources":["/home/doduohor/vue/src/App.vue"],"sourcesContent":["<template>\n    <!-- Блок чата -->\n    <div class=\"chat-container\" :class=\"{ 'moved': messageSent }\">\n        <!-- Ответ на вопрос -->\n        <div v-if=\"response\" class=\"response\">{{ response }}</div>\n        <div class=\"input-container\">\n            <!-- Поле ввода текста -->\n            <textarea class=\"question-input\" v-model=\"question\" placeholder=\"Введите ваш вопрос здесь\"\n                @keyup.enter=\"askQuestion\"></textarea>\n            <!-- Кнопка отправки -->\n            <button class=\"send-button\" @click=\"askQuestion\">&</button>\n        </div>\n        <!-- Индикатор загрузки -->\n        <div v-if=\"loading\" class=\"loading\">Загрузка...</div>\n    </div>\n</template>\n\n  \n<script>\nimport { ref } from 'vue';\n\nexport default {\n    setup() {\n        const question = ref(''); // Поле ввода текста\n        const response = ref(null); // Ответ на вопрос\n        const loading = ref(false); // Индикатор загрузки\n        const messageSent = ref(false); // Флаг для перемещения элементов\n\n        const askQuestion = async () => {\n            if (question.value.trim() === '') return; // Предотвращение отправки пустых сообщений\n            loading.value = true;\n            messageSent.value = true; // Устанавливаем флаг после отправки сообщения\n            // Здесь должен быть код для отправки запроса к API\n            // Для примера, просто имитируем получение ответа\n            setTimeout(() => {\n                response.value = question.value; // Удаление \"Ответ: \" для простоты\n                loading.value = false;\n            }, 2000);\n        };\n\n        return { question, response, askQuestion, loading, messageSent };\n    }\n};\n</script>\n  \n<style>\nbody {\n    background-color: #121212;\n    /* Темный фон для всей страницы */\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\n/* Стили для блока чата */\n.chat-container {\n    position: absolute;\n    top: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 600px;\n    padding: 20px;\n    background-color: #1e1e1e;\n    border-radius: 10px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);\n    color: #ffffff;\n    transition: all 0.5s ease;\n}\n\n.chat-container.moved {\n    top: auto;\n    bottom: 20px;\n    /* Перемещение в нижнюю часть страницы */\n    transform: translateX(-50%);\n}\n\n/* Стили для поля ввода текста */\n.input-container {\n    display: flex;\n    align-items: stretch;\n    margin-bottom: 15px;\n}\n\n.question-input {\n    flex-grow: 1;\n    padding: 12px;\n    background-color: #2a2a2a;\n    border: 1px solid #333333;\n    border-radius: 6px 0 0 6px;\n    color: #ffffff;\n    resize: none;\n}\n\n/* Стили для кнопки отправки */\n.send-button {\n    padding: 0 15px;\n    background-color: #4caf50;\n    color: white;\n    border: none;\n    border-radius: 0 6px 6px 0;\n    cursor: pointer;\n    transition: background-color 0.3s, transform 0.2s;\n}\n\n.send-button:hover {\n    background-color: #43a047;\n    transform: scale(1.05);\n}\n\n/* Стили для индикатора загрузки */\n.loading {\n    text-align: center;\n    color: #4caf50;\n    margin-top: 10px;\n}\n\n/* Стили для ответа на вопрос */\n.response {\n    margin-top: 20px;\n    padding: 15px;\n    border-radius: 6px;\n    color: #ffffff;\n}\n</style>\n"],"mappings":"AAmBA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACXC,KAAKA,CAAA,EAAG;IACJ,MAAMC,QAAO,GAAIF,GAAG,CAAC,EAAE,CAAC,EAAE;IAC1B,MAAMG,QAAO,GAAIH,GAAG,CAAC,IAAI,CAAC,EAAE;IAC5B,MAAMI,OAAM,GAAIJ,GAAG,CAAC,KAAK,CAAC,EAAE;IAC5B,MAAMK,WAAU,GAAIL,GAAG,CAAC,KAAK,CAAC,EAAE;;IAEhC,MAAMM,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC5B,IAAIJ,QAAQ,CAACK,KAAK,CAACC,IAAI,CAAC,MAAM,EAAE,EAAE,OAAM,CAAE;MAC1CJ,OAAO,CAACG,KAAI,GAAI,IAAI;MACpBF,WAAW,CAACE,KAAI,GAAI,IAAI,EAAE;MAC1B;MACA;MACAE,UAAU,CAAC,MAAM;QACbN,QAAQ,CAACI,KAAI,GAAIL,QAAQ,CAACK,KAAK,EAAE;QACjCH,OAAO,CAACG,KAAI,GAAI,KAAK;MACzB,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC;IAED,OAAO;MAAEL,QAAQ;MAAEC,QAAQ;MAAEG,WAAW;MAAEF,OAAO;MAAEC;IAAY,CAAC;EACpE;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}