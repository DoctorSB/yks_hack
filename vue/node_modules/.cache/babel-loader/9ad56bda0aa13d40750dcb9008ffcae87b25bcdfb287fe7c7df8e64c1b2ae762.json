{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withModifiers as _withModifiers, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"copy-button\"\n};\nconst _hoisted_2 = {\n  class: \"input-container\"\n};\nconst _hoisted_3 = [\"disabled\"];\nconst _hoisted_4 = [\"disabled\"];\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Блок чата \"), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"chat-container\", {\n      'moved': $setup.messageSent\n    }])\n  }, [_createCommentVNode(\" Ответ на вопрос \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.chatHistory, message => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: message.text,\n      class: _normalizeClass([\"message\", {\n        'user-message': message.isUser,\n        'user-message-right': message.isUser\n      }])\n    }, [_createTextVNode(_toDisplayString(message.text), 1 /* TEXT */), _createCommentVNode(\" Кнопка копирования ответа \"), !message.isUser && message.text === $setup.response ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, [_createElementVNode(\"button\", {\n      onClick: _cache[0] || (_cache[0] = (...args) => $setup.copyResponse && $setup.copyResponse(...args))\n    }, \"⇴\")])) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Поле ввода текста \"), _withDirectives(_createElementVNode(\"textarea\", {\n    class: \"question-input\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.question = $event),\n    disabled: $setup.loading,\n    placeholder: \"Введите ваш вопрос здесь\",\n    onKeydown: _cache[2] || (_cache[2] = _withKeys(_withModifiers((...args) => $setup.submitForm && $setup.submitForm(...args), [\"prevent\"]), [\"enter\"]))\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_3), [[_vModelText, $setup.question]]), _createCommentVNode(\" Кнопка отправки \"), _createElementVNode(\"button\", {\n    class: \"send-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.submitForm && $setup.submitForm(...args)),\n    disabled: $setup.loading\n  }, [_createCommentVNode(\" Вместо текста \\\"Загрузка...\\\" используем иконку \"), $setup.loading ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \"↺\")) : (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"✉\"))], 8 /* PROPS */, _hoisted_4)])], 2 /* CLASS */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createCommentVNode","_createElementVNode","_normalizeClass","$setup","messageSent","_createElementBlock","_Fragment","_renderList","chatHistory","message","key","text","isUser","response","_hoisted_1","onClick","_cache","args","copyResponse","_hoisted_2","question","$event","disabled","loading","placeholder","onKeydown","_withKeys","_withModifiers","submitForm","_hoisted_5","_hoisted_6"],"sources":["/home/doduohor/vue/src/App.vue"],"sourcesContent":["<template>\n    <!-- Блок чата -->\n    <div class=\"chat-container\" :class=\"{ 'moved': messageSent }\">\n        <!-- Ответ на вопрос -->\n        <div v-for=\"message in chatHistory\" :key=\"message.text\" class=\"message\"\n            :class=\"{ 'user-message': message.isUser, 'user-message-right': message.isUser }\">\n            {{ message.text }}\n            <!-- Кнопка копирования ответа -->\n            <span v-if=\"!message.isUser && message.text === response\" class=\"copy-button\">\n                <button @click=\"copyResponse\">&#8692;</button>\n            </span>\n        </div>\n        <div class=\"input-container\">\n            <!-- Поле ввода текста -->\n            <textarea class=\"question-input\" v-model=\"question\" :disabled=\"loading\" placeholder=\"Введите ваш вопрос здесь\"\n                @keydown.enter.prevent=\"submitForm\"></textarea>\n            <!-- Кнопка отправки -->\n            <button class=\"send-button\" @click=\"submitForm\" :disabled=\"loading\">\n                <!-- Вместо текста \"Загрузка...\" используем иконку -->\n                <span v-if=\"loading\">&#8634;</span>\n                <span v-else>&#9993;</span>\n            </button>\n        </div>\n    </div>\n</template>\n  \n<script>\nimport { ref } from 'vue';\n\nexport default {\n    setup() {\n        const question = ref(''); // Поле ввода текста\n        const response = ref(null); // Ответ на вопрос\n        const loading = ref(false); // Индикатор загрузки\n        const messageSent = ref(false); // Флаг для перемещения элементов\n        const chatHistory = ref([]); // Массив для хранения истории сообщений\n\n        const submitForm = async () => {\n            if (question.value.trim() === '') return; // Предотвращение отправки пустых сообщений\n            loading.value = true;\n            messageSent.value = true; // Устанавливаем флаг после отправки сообщения\n            // Здесь должен быть код для отправки запроса к API\n            // Для примера, просто имитируем получение ответа\n            setTimeout(() => {\n                response.value = question.value; // Удаление \"Ответ: \" для простоты\n                loading.value = false;\n                chatHistory.value.push({ text: question.value, isUser: true }); // Добавить сообщение пользователя\n                chatHistory.value.push({ text: response.value, isUser: false }); // Добавить ответ\n                question.value = ''; // Очистить поле ввода после отправки\n            }, 2000);\n        };\n\n        const copyResponse = () => {\n            if (response.value) {\n                // Создаем временный элемент для копирования текста\n                const tempInput = document.createElement('textarea');\n                tempInput.value = response.value;\n                document.body.appendChild(tempInput);\n                tempInput.select();\n                document.execCommand('copy');\n                document.body.removeChild(tempInput);\n                // Можно также добавить сообщение об успешном копировании\n            }\n        };\n\n        return { question, response, submitForm, loading, messageSent, chatHistory, copyResponse };\n    },\n};\n</script>\n  \n\n<style>\n/* Общие стили страницы */\nbody {\n    background-color: #121212;\n    /* Цвет фона страницы */\n    margin: 0;\n    /* Убираем отступы по умолчанию */\n    font-family: Arial, sans-serif;\n    /* Шрифт текста */\n}\n\n.copy-button {\n    cursor: pointer;\n    margin-left: 5px;\n    /* Отступ между кнопкой и текстом сообщения */\n}\n\n.copy-button button {\n    background: none;\n    border: none;\n    padding: 0;\n    font-size: inherit;\n    cursor: pointer;\n    color: #007bff;\n    /* Цвет ссылки, можно изменить на другой цвет */\n}\n\n/* Стили для блока чата */\n.chat-container {\n    position: absolute;\n    /* Абсолютное позиционирование блока */\n    top: 20px;\n    /* Отступ сверху */\n    left: 50%;\n    /* Горизонтальное выравнивание по центру */\n    transform: translateX(-50%);\n    /* Центрирование по горизонтали */\n    width: 600px;\n    /* Ширина блока чата */\n    padding: 20px;\n    /* Внутренние отступы */\n    background-color: #1e1e1e;\n    /* Цвет фона */\n    border-radius: 10px;\n    /* Скругление углов */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);\n    /* Тень блока */\n    color: #ffffff;\n    /* Цвет текста */\n    transition: all 0.5s ease;\n    /* Плавные анимации изменения свойств */\n}\n\n@media screen and (max-width: 600px) {\n    .chat-container {\n        width: auto;\n        /* Автоматическая ширина блока чата при маленьких экранах */\n    }\n}\n\n.chat-container.moved {\n    top: auto;\n    /* Отмена верхнего отступа */\n    bottom: 20px;\n    /* Отступ снизу */\n    transform: translateX(-50%);\n    /* Центрирование по горизонтали */\n}\n\n/* Стили для сообщений */\n.message {\n    margin-top: 10px;\n    border: 1px solid #ffffff;\n    /* Отступ сверху между сообщениями */\n    margin-bottom: 10px;\n    /* Отступ снизу между сообщениями */\n    padding: 6px;\n    /* Внутренние отступы сообщений */\n    border-radius: 6px;\n    /* Скругление углов сообщений */\n    max-width: 100%;\n    /* Максимальная ширина сообщений */\n    word-wrap: break-word;\n    /* Перенос длинных слов */\n}\n\n.user-message {\n    /* background-color: #4caf50; */\n    /* Цвет фона сообщения пользователя */\n    border: 1px solid #11e738;\n    /* Граница сообщения пользователя */\n    color: white;\n    /* Цвет текста сообщения пользователя */\n    margin-top: 3px;\n    /* Отступ сверху между сообщениями */\n    margin-bottom: 3px;\n    /* Отступ снизу между сообщениями */\n    padding: 6px;\n    /* Внутренние отступы сообщений */\n    border-radius: 6px;\n    /* Скругление углов сообщений */\n    max-width: 100%;\n    /* Максимальная ширина сообщений */\n    word-wrap: break-word;\n    /* Перенос длинных слов */\n}\n\n/* Стили для поля ввода текста */\n.input-container {\n    display: flex;\n    /* Использование flexbox для распределения элементов */\n    align-items: stretch;\n    /* Выравнивание элементов по высоте */\n    margin-bottom: 15px;\n    /* Отступ снизу между полем ввода и сообщением */\n}\n\n/* Стили для поля ввода текста */\n.question-input {\n    flex-grow: 1;\n    /* Занимает все доступное пространство */\n    padding: 12px;\n    /* Внутренние отступы поля ввода */\n    background-color: #1e1e1e;\n    /* Цвет фона поля ввода */\n    border: 1px solid #333333;\n    /* Граница поля ввода */\n    border-radius: 6px 0 0 6px;\n    /* Скругление углов поля ввода */\n    color: #ffffff;\n    /* Цвет текста */\n    resize: none;\n    /* Запрет на изменение размера поля ввода */\n}\n\n/* Дополнительные стили для заблокированного ввода */\n.question-input:disabled {\n    background-color: #3a3a3a;\n    /* Темнее фон для заблокированного поля */\n    cursor: not-allowed;\n    /* Курсор в стиле 'нельзя' */\n}\n\n/* Стили для кнопки отправки */\n.send-button {\n    padding: 0 15px;\n    width: 50px;\n    /* Внутренние отступы кнопки */\n    background-color: #4caf50;\n    /* Цвет фона кнопки */\n    color: white;\n    /* Цвет текста кнопки */\n    border: none;\n    /* Убираем границу кнопки */\n    border-radius: 0 6px 6px 0;\n    /* Скругление углов кнопки */\n    cursor: pointer;\n    /* Курсор указывает на возможность нажатия */\n    transition: background-color 0.3s, transform 0.2s;\n    /* Плавные анимации изменения свойств */\n}\n\n.send-button:hover {\n    background-color: #43a047;\n    /* Цвет фона кнопки при наведении */\n    transform: scale(1.05);\n    /* Увеличение размера кнопки при наведении */\n}\n\n\n/* Стили для ответа на вопрос */\n.response {\n    margin-top: 20px;\n    /* Отступ сверху от ответа на вопрос */\n    padding: 15px;\n    /* Внутренние отступы ответа */\n    border-radius: 6px;\n    /* Скругление углов ответа */\n    color: #ffffff;\n    /* Цвет текста ответа */\n}</style>\n"],"mappings":";;;EAQsEA,KAAK,EAAC;;;EAI/DA,KAAK,EAAC;AAAiB;;;;;;;;;;6DAXhCC,mBAAA,eAAkB,EAClBC,mBAAA,CAqBM;IArBDF,KAAK,EAAAG,eAAA,EAAC,gBAAgB;MAAA,SAAoBC,MAAA,CAAAC;IAAW;MACtDJ,mBAAA,qBAAwB,G,kBACxBK,mBAAA,CAOMC,SAAA,QAAAC,WAAA,CAPiBJ,MAAA,CAAAK,WAAW,EAAtBC,OAAO;yBAAnBJ,mBAAA,CAOM;MAP+BK,GAAG,EAAED,OAAO,CAACE,IAAI;MAAEZ,KAAK,EAAAG,eAAA,EAAC,SAAS;QAAA,gBACzCO,OAAO,CAACG,MAAM;QAAA,sBAAwBH,OAAO,CAACG;MAAM;0CAC3EH,OAAO,CAACE,IAAI,kBACfX,mBAAA,+BAAkC,E,CACrBS,OAAO,CAACG,MAAM,IAAIH,OAAO,CAACE,IAAI,KAAKR,MAAA,CAAAU,QAAQ,I,cAAxDR,mBAAA,CAEO,QAFPS,UAEO,GADHb,mBAAA,CAA8C;MAArCc,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEd,MAAA,CAAAe,YAAA,IAAAf,MAAA,CAAAe,YAAA,IAAAD,IAAA,CAAY;OAAE,GAAO,E;kCAG7ChB,mBAAA,CAUM,OAVNkB,UAUM,GATFnB,mBAAA,uBAA0B,E,gBAC1BC,mBAAA,CACmD;IADzCF,KAAK,EAAC,gBAAgB;+DAAUI,MAAA,CAAAiB,QAAQ,GAAAC,MAAA;IAAGC,QAAQ,EAAEnB,MAAA,CAAAoB,OAAO;IAAEC,WAAW,EAAC,0BAA0B;IACzGC,SAAO,EAAAT,MAAA,QAAAA,MAAA,MAAAU,SAAA,CAAAC,cAAA,KAAAV,IAAA,KAAgBd,MAAA,CAAAyB,UAAA,IAAAzB,MAAA,CAAAyB,UAAA,IAAAX,IAAA,CAAU;uEADId,MAAA,CAAAiB,QAAQ,E,GAElDpB,mBAAA,qBAAwB,EACxBC,mBAAA,CAIS;IAJDF,KAAK,EAAC,aAAa;IAAEgB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEd,MAAA,CAAAyB,UAAA,IAAAzB,MAAA,CAAAyB,UAAA,IAAAX,IAAA,CAAU;IAAGK,QAAQ,EAAEnB,MAAA,CAAAoB;MACvDvB,mBAAA,qDAAsD,EAC1CG,MAAA,CAAAoB,OAAO,I,cAAnBlB,mBAAA,CAAmC,QAAAwB,UAAA,EAAd,GAAO,M,cAC5BxB,mBAAA,CAA2B,QAAAyB,UAAA,EAAd,GAAO,G"},"metadata":{},"sourceType":"module","externalDependencies":[]}