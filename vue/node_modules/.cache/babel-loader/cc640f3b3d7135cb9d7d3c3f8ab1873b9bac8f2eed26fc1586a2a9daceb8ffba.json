{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nexport default {\n  setup() {\n    const question = ref('');\n    const response = ref(null);\n    const loading = ref(false);\n    const messageSent = ref(false);\n    const chatHistory = ref([]);\n    const textInput = ref(null);\n    const handleEnter = event => {\n      if (event.shiftKey) {\n        question.value += '\\n';\n      } else {\n        event.preventDefault(); // Предотвращение стандартного поведения Enter\n        submitForm();\n      }\n    };\n    const submitForm = async () => {\n      if (question.value.trim() === '') return;\n      loading.value = true;\n      messageSent.value = true;\n\n      // Имитация отправки запроса к API\n      setTimeout(() => {\n        response.value = question.value;\n        loading.value = false;\n        chatHistory.value.push({\n          text: question.value,\n          isUser: true\n        });\n        chatHistory.value.push({\n          text: response.value,\n          isUser: false\n        });\n        question.value = ''; // Очистка поля после отправки\n        textInput.value.focus(); // Установка фокуса на поле ввода\n      }, 2000);\n    };\n    const copyResponse = () => {\n      if (response.value) {\n        const tempInput = document.createElement('textarea');\n        tempInput.value = response.value;\n        document.body.appendChild(tempInput);\n        tempInput.select();\n        document.execCommand('copy');\n        document.body.removeChild(tempInput);\n      }\n    };\n    onMounted(() => {\n      // Установка фокуса на поле ввода при загрузке компонента\n      textInput.value.focus();\n    });\n    return {\n      question,\n      response,\n      submitForm,\n      loading,\n      messageSent,\n      chatHistory,\n      handleEnter,\n      copyResponse,\n      textInput\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","setup","question","response","loading","messageSent","chatHistory","textInput","handleEnter","event","shiftKey","value","preventDefault","submitForm","trim","setTimeout","push","text","isUser","focus","copyResponse","tempInput","document","createElement","body","appendChild","select","execCommand","removeChild"],"sources":["/home/doduohor/vue/src/App.vue"],"sourcesContent":["<template>\n    <!-- Блок чата -->\n    <div class=\"chat-container\" :class=\"{ 'moved': messageSent }\">\n        <!-- Ответ на вопрос -->\n        <div v-for=\"message in chatHistory\" :key=\"message.text\" class=\"message\"\n            :class=\"{ 'user-message': message.isUser, 'user-message-right': message.isUser }\">\n            {{ message.text }}\n        </div>\n        <div class=\"input-container\">\n            <!-- Поле ввода текста -->\n            <textarea ref=\"textInput\" class=\"question-input\" v-model=\"question\" :disabled=\"loading\"\n                placeholder=\"Введите ваш вопрос здесь\" @keydown.enter.prevent=\"handleEnter\"></textarea>\n            <!-- Кнопка отправки -->\n            <button class=\"send-button\" @click=\"submitForm\" :disabled=\"loading\">\n                <span v-if=\"loading\">&#8987;</span>\n                <span v-else>&#9993;</span>\n            </button>\n            <!-- Кнопка копирования ответа -->\n            <button class=\"copy-button\" @click=\"copyResponse\" :disabled=\"!response\">\n                &#128195\n            </button>\n        </div>\n    </div>\n</template>\n  \n<script>\nimport { ref, onMounted } from 'vue';\n\nexport default {\n    setup() {\n        const question = ref('');\n        const response = ref(null);\n        const loading = ref(false);\n        const messageSent = ref(false);\n        const chatHistory = ref([]);\n        const textInput = ref(null);\n\n        const handleEnter = (event) => {\n            if (event.shiftKey) {\n                question.value += '\\n';\n            } else {\n                event.preventDefault(); // Предотвращение стандартного поведения Enter\n                submitForm();\n            }\n        };\n\n        const submitForm = async () => {\n            if (question.value.trim() === '') return;\n            loading.value = true;\n            messageSent.value = true;\n\n            // Имитация отправки запроса к API\n            setTimeout(() => {\n                response.value = question.value;\n                loading.value = false;\n                chatHistory.value.push({ text: question.value, isUser: true });\n                chatHistory.value.push({ text: response.value, isUser: false });\n                question.value = ''; // Очистка поля после отправки\n                textInput.value.focus(); // Установка фокуса на поле ввода\n            }, 2000);\n        };\n\n        const copyResponse = () => {\n            if (response.value) {\n                const tempInput = document.createElement('textarea');\n                tempInput.value = response.value;\n                document.body.appendChild(tempInput);\n                tempInput.select();\n                document.execCommand('copy');\n                document.body.removeChild(tempInput);\n            }\n        };\n\n        onMounted(() => {\n            // Установка фокуса на поле ввода при загрузке компонента\n            textInput.value.focus();\n        });\n\n        return { question, response, submitForm, loading, messageSent, chatHistory, handleEnter, copyResponse, textInput };\n    },\n};\n</script>\n\n<style>\n/* Общие стили страницы */\nbody {\n    background-color: #121212;\n    /* Цвет фона страницы */\n    margin: 0;\n    /* Убираем отступы по умолчанию */\n    font-family: Arial, sans-serif;\n    /* Шрифт текста */\n}\n\n.copy-button {\n    cursor: pointer;\n    margin-left: 5px;\n    background-color: #1e1e1e;\n    border: 1px solid #3a3a3a;\n    border-radius: 6px;\n    transition: background-color 0.3s, transform 0.2s;\n}\n\n.copy-button:hover {\n    border: 1px solid #4d4c4c;\n    /* Цвет фона кнопки при наведении */\n    transform: scale(1.05);\n    /* Увеличение размера кнопки при наведении */\n}\n\n/* Стили для блока чата */\n.chat-container {\n    position: absolute;\n    /* Абсолютное позиционирование блока */\n    top: 20px;\n    /* Отступ сверху */\n    left: 50%;\n    /* Горизонтальное выравнивание по центру */\n    transform: translateX(-50%);\n    /* Центрирование по горизонтали */\n    width: 600px;\n    /* Ширина блока чата */\n    padding: 20px;\n    /* Внутренние отступы */\n    background-color: #1e1e1e;\n    /* Цвет фона */\n    border-radius: 10px;\n    /* Скругление углов */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);\n    /* Тень блока */\n    color: #ffffff;\n    /* Цвет текста */\n    transition: all 0.5s ease;\n    /* Плавные анимации изменения свойств */\n}\n\n@media screen and (max-width: 600px) {\n    .chat-container {\n        width: auto;\n        /* Автоматическая ширина блока чата при маленьких экранах */\n    }\n}\n\n.chat-container.moved {\n    top: auto;\n    /* Отмена верхнего отступа */\n    bottom: 20px;\n    /* Отступ снизу */\n    transform: translateX(-50%);\n    /* Центрирование по горизонтали */\n}\n\n/* Стили для сообщений */\n.message {\n    margin-top: 10px;\n    border: 1px solid #ffffff;\n    /* Отступ сверху между сообщениями */\n    margin-bottom: 10px;\n    /* Отступ снизу между сообщениями */\n    padding: 6px;\n    /* Внутренние отступы сообщений */\n    border-radius: 6px;\n    /* Скругление углов сообщений */\n    max-width: 100%;\n    /* Максимальная ширина сообщений */\n    word-wrap: break-word;\n    /* Перенос длинных слов */\n}\n\n.user-message {\n    /* background-color: #4caf50; */\n    /* Цвет фона сообщения пользователя */\n    border: 0;\n    /* Граница сообщения пользователя */\n    color: white;\n    /* Цвет текста сообщения пользователя */\n    margin-top: 3px;\n    /* Отступ сверху между сообщениями */\n    margin-bottom: 3px;\n    /* Отступ снизу между сообщениями */\n    padding: 6px;\n    /* Внутренние отступы сообщений */\n    border-radius: 6px;\n    /* Скругление углов сообщений */\n    max-width: 100%;\n    /* Максимальная ширина сообщений */\n    word-wrap: break-word;\n    /* Перенос длинных слов */\n}\n\n/* Стили для поля ввода текста */\n.input-container {\n    display: flex;\n    /* Использование flexbox для распределения элементов */\n    align-items: stretch;\n    /* Выравнивание элементов по высоте */\n}\n\n/* Стили для поля ввода текста */\n.question-input {\n    display: flex;\n    flex-grow: 1;\n    /* Занимает все доступное пространство */\n    padding: 15px;\n    /* Внутренние отступы поля ввода */\n    background-color: #1e1e1e;\n    /* Цвет фона поля ввода */\n    border: 1px solid #333333;\n    /* Граница поля ввода */\n    border-radius: 6px 0 0 6px;\n    /* Скругление углов поля ввода */\n    color: #ffffff;\n    /* Цвет текста */\n    resize: none;\n    /* Запрет на изменение размера поля ввода */\n}\n\n/* Дополнительные стили для заблокированного ввода */\n.question-input:disabled {\n    background-color: #3a3a3a;\n    /* Темнее фон для заблокированного поля */\n    cursor: not-allowed;\n    /* Курсор в стиле 'нельзя' */\n}\n\n/* Стили для кнопки отправки */\n.send-button {\n    padding: 0 15px;\n    width: 50px;\n    /* Внутренние отступы кнопки */\n    background-color: #4caf50;\n    /* Цвет фона кнопки */\n    color: white;\n    /* Цвет текста кнопки */\n    border: none;\n    /* Убираем границу кнопки */\n    border-radius: 0 6px 6px 0;\n    /* Скругление углов кнопки */\n    cursor: pointer;\n    /* Курсор указывает на возможность нажатия */\n    transition: background-color 0.3s, transform 0.2s;\n    /* Плавные анимации изменения свойств */\n}\n\n.send-button:hover {\n    background-color: #43a047;\n    /* Цвет фона кнопки при наведении */\n    transform: scale(1.05);\n    /* Увеличение размера кнопки при наведении */\n}\n\n\n/* Стили для ответа на вопрос */\n.response {\n    margin-top: 20px;\n    /* Отступ сверху от ответа на вопрос */\n    padding: 15px;\n    /* Внутренние отступы ответа */\n    border-radius: 6px;\n    /* Скругление углов ответа */\n    color: #ffffff;\n    /* Цвет текста ответа */\n}\n</style>\n"],"mappings":";AA0BA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AAEpC,eAAe;EACXC,KAAKA,CAAA,EAAG;IACJ,MAAMC,QAAO,GAAIH,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMI,QAAO,GAAIJ,GAAG,CAAC,IAAI,CAAC;IAC1B,MAAMK,OAAM,GAAIL,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMM,WAAU,GAAIN,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMO,WAAU,GAAIP,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMQ,SAAQ,GAAIR,GAAG,CAAC,IAAI,CAAC;IAE3B,MAAMS,WAAU,GAAKC,KAAK,IAAK;MAC3B,IAAIA,KAAK,CAACC,QAAQ,EAAE;QAChBR,QAAQ,CAACS,KAAI,IAAK,IAAI;MAC1B,OAAO;QACHF,KAAK,CAACG,cAAc,CAAC,CAAC,EAAE;QACxBC,UAAU,CAAC,CAAC;MAChB;IACJ,CAAC;IAED,MAAMA,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC3B,IAAIX,QAAQ,CAACS,KAAK,CAACG,IAAI,CAAC,MAAM,EAAE,EAAE;MAClCV,OAAO,CAACO,KAAI,GAAI,IAAI;MACpBN,WAAW,CAACM,KAAI,GAAI,IAAI;;MAExB;MACAI,UAAU,CAAC,MAAM;QACbZ,QAAQ,CAACQ,KAAI,GAAIT,QAAQ,CAACS,KAAK;QAC/BP,OAAO,CAACO,KAAI,GAAI,KAAK;QACrBL,WAAW,CAACK,KAAK,CAACK,IAAI,CAAC;UAAEC,IAAI,EAAEf,QAAQ,CAACS,KAAK;UAAEO,MAAM,EAAE;QAAK,CAAC,CAAC;QAC9DZ,WAAW,CAACK,KAAK,CAACK,IAAI,CAAC;UAAEC,IAAI,EAAEd,QAAQ,CAACQ,KAAK;UAAEO,MAAM,EAAE;QAAM,CAAC,CAAC;QAC/DhB,QAAQ,CAACS,KAAI,GAAI,EAAE,EAAE;QACrBJ,SAAS,CAACI,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE;MAC7B,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC;IAED,MAAMC,YAAW,GAAIA,CAAA,KAAM;MACvB,IAAIjB,QAAQ,CAACQ,KAAK,EAAE;QAChB,MAAMU,SAAQ,GAAIC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;QACpDF,SAAS,CAACV,KAAI,GAAIR,QAAQ,CAACQ,KAAK;QAChCW,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACJ,SAAS,CAAC;QACpCA,SAAS,CAACK,MAAM,CAAC,CAAC;QAClBJ,QAAQ,CAACK,WAAW,CAAC,MAAM,CAAC;QAC5BL,QAAQ,CAACE,IAAI,CAACI,WAAW,CAACP,SAAS,CAAC;MACxC;IACJ,CAAC;IAEDrB,SAAS,CAAC,MAAM;MACZ;MACAO,SAAS,CAACI,KAAK,CAACQ,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO;MAAEjB,QAAQ;MAAEC,QAAQ;MAAEU,UAAU;MAAET,OAAO;MAAEC,WAAW;MAAEC,WAAW;MAAEE,WAAW;MAAEY,YAAY;MAAEb;IAAU,CAAC;EACtH;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}